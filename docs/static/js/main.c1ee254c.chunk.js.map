{"version":3,"sources":["Components/Keys.jsx","Components/Calculator.jsx","CalculatorApp.jsx","index.jsx"],"names":["Keys","memo","setExercise","keySymbol","handleSymbolNumber","e","value","target","last","includes","ex","substr","slice","lastEx","respAct","className","map","simb","index","key","toString","type","onClick","numb","last1","length","res","Calculator","initialValue","useState","exercise","result","round","evaluate","error","alert","CalculatorApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEaA,EAAOC,gBAAK,YAAoB,IAAlBC,EAAiB,EAAjBA,YAQrBC,EAAY,CAAC,IAAI,IAAI,IAAI,KAiBzBC,EAAqB,SAACC,GACxB,IAAMC,EAAQD,EAAEE,OAAOD,MAEvBJ,GAAY,SAAAM,GAEPL,EAAUM,SAASD,EAAKE,GAAGC,QAAQ,KAAOR,EAAUM,SAASH,KAC1DE,EAAKE,GAAKF,EAAKE,GAAGE,MAAM,GAAI,IAEhC,IAAMC,EAAsB,MAAZL,EAAKE,IAAwB,MAAVJ,EAClCH,EAAUM,SAASH,GAASE,EAAKE,GAAK,GACrCF,EAAKE,GAEP,OAAO,YAAC,eAAIF,GAAZ,IAAiBE,GAAG,GAAD,OAAIG,EAASP,GAAQQ,SAAS,QAgBrD,OACQ,oCACA,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OAERZ,EAAUa,KAAI,SAACC,EAAKC,GAAN,OACb,yBAAKC,IAAKD,EAAME,WAAYL,UAAU,uBAClC,4BAASM,KAAK,SAASN,UAAU,MAAMO,QAASlB,EAAoBE,MAAOW,GAAOA,SAMlG,yBAAKF,UAAU,YACX,yBAAKA,UAAU,OA5DZ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KA8DNC,KAAI,SAACO,EAAKL,GAAN,OACd,yBAAKC,IAAKD,EAAME,WAAYL,UAAU,uBAClC,4BAAQM,KAAK,SAASN,UAAU,MAAMO,QAASlB,EAAqBE,MAAOiB,GAAOA,OAI1F,yBAAKR,UAAU,uBACX,4BAAQM,KAAK,SAASN,UAAU,iBAAiBO,QAjCrD,WAChBpB,GAAY,SAAAM,GACR,IAAMgB,EAAShB,EAAKE,GAAGe,OAAO,EAAKjB,EAAKE,GAAGE,MAAM,GAAI,GAAK,IAE1D,OAAQJ,EAAKM,QACZ,CAACJ,GAAI,IAAIgB,IAAK,EAAGZ,SAAS,GADpB,YAAC,eAEHN,GAFE,IAEGE,GAAIc,SA2BE,a,eCtEXG,G,MAAa,SAAC,GAA0B,IAAD,IAAvBC,oBAAuB,MAAR,EAAQ,IAKhBC,mBAAS,CACrCnB,GAAG,GAAD,OAAKkB,GACPF,IAAKE,EACLd,SAAS,IARmC,mBAKzCgB,EALyC,KAK/B5B,EAL+B,KA8BhD,OACI,yBAAKa,UAAU,kCACX,yBAAKA,UAAU,mCACX,6BAEA,yBAAKA,UAAU,oBACX,4BAAKe,EAASpB,IACV,6BACJ,4BAAKoB,EAASJ,MAGlB,yBAAKX,UAAU,oBACX,yBAAKA,UAAU,OACX,kBAACf,EAAD,CAAME,YAAaA,IAEnB,yBAAKa,UAAU,sBACX,yBAAKA,UAAU,qCAAqCO,QA1BvD,WACpB,IACO,IAAMS,EAAUC,aAAMC,YAASH,EAASpB,IAAI,GAC5CR,EAAY,2BAAI4B,GAAL,IAAcJ,IAAIK,EAAOjB,SAAS,KAClD,MAAOoB,GACFC,MAAM,2CAsBc,qCAMhB,iCC1DHC,EAAgB,WACzB,OACI,6BACI,kBAAC,EAAD,CAAYR,aAAc,MCFtCS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c1ee254c.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\n//using memo for eviting the refresh of the component\r\nexport const Keys = memo(({setExercise}) => {\r\n\r\n/*\r\nused to decrease the identical code of the buttons, the return is traversed\r\nthe lists using the .map and creating the buttons\r\n*/\r\n    \r\nconst keyNumeric = [1,2,3,4,5,6,7,8,9,0,'.'];\r\nconst keySymbol = ['+','-','*','/'];\r\n\r\n/*\r\nfunction applied to all buttons with the exception of the AC and = to update the status of the exercise:\r\n1.-take button value\r\n\r\n2.-use the property of the setState (setExercise) that fetches the current value of the state \r\n\r\n3.-validates if the last digit of the exercise and the value of the button \r\nare mathematical symbols, if they are, replace the last digit with the new value\r\n\r\n4.-valid if the current exercise is '0' and the new value is '.' or some symbol of mathematical operation to add the\r\nnew courage to exercise, if not '.' replace 0 with the new number\r\n\r\n5.-copy the previous values ​​of the state and replace the value of the exercise, with the new value\r\n*/\r\n\r\nconst handleSymbolNumber = (e) => {\r\n    const value = e.target.value;\r\n\r\n    setExercise(last => {\r\n        \r\n        (keySymbol.includes(last.ex.substr(-1)) && keySymbol.includes(value)) \r\n        && (last.ex = last.ex.slice(0, -1));\r\n\r\n        const lastEx = (last.ex === '0' && value !== '.' ) ? \r\n        (keySymbol.includes(value))? last.ex : '' \r\n        : last.ex;\r\n\r\n        return ({...last,ex:`${lastEx + value}`,respAct: false}); \r\n        \r\n    });\r\n};\r\n\r\n//returns the state values ​​to 0\r\nconst handleReset = () => {\r\n    setExercise(last =>{\r\n        const last1 = (last.ex.length>1)? (last.ex.slice(0, -1)): '0';\r\n\r\n        return (last.respAct)?\r\n        ({ex: '0',res: 0, respAct: false}):\r\n        ({...last,ex: last1});\r\n    });\r\n};\r\n\r\n    return (\r\n            <>\r\n            <div className=\"col-sm-12\">\r\n                <div className=\"row\">\r\n                    {\r\n                       keySymbol.map((simb,index) =>(\r\n                        <div key={index.toString()} className=\"col-sm-3 contButton\">\r\n                            <button  type=\"button\" className=\"btn\" onClick={handleSymbolNumber} value={simb}>{simb}</button>\r\n                        </div>\r\n                       )) \r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-sm-9\">\r\n                <div className=\"row\">\r\n                    {\r\n                       keyNumeric.map((numb,index) =>(\r\n                        <div key={index.toString()} className=\"col-sm-4 contButton\">\r\n                            <button type=\"button\" className=\"btn\" onClick={handleSymbolNumber}  value={numb}>{numb}</button>\r\n                        </div>\r\n                       )) \r\n                    }\r\n                    <div className=\"col-sm-4 contButton\">\r\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={handleReset}>AC</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n    )\r\n});\r\n","\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Keys } from './Keys';\r\nimport { evaluate, round } from 'mathjs'\r\nimport './styles.css';\r\n\r\n//if the initial value is not sent the initial value is equal to 0\r\nexport const Calculator = ( {initialValue = 0} ) => {\r\n\r\n    /*\r\n    hook useState to control both the result and the exercise\r\n    */\r\n    const [exercise, setExercise] = useState({\r\n        ex: `${initialValue}`,\r\n        res: initialValue,\r\n        respAct: false\r\n    });\r\n\r\n    //function in charge of updating the result\r\n    /*\r\n    1.-handle errors using the try catch\r\n    2.-generate the result using 'evaluate' from the mathjs library, \r\n       since according to developer.mozilla, the use of eval is not recommended\r\n       https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/eval\r\n    3.-update the result state \r\n    */\r\n\r\n    const handleResult = () => {\r\n     try {  \r\n            const result =  round(evaluate(exercise.ex),4);\r\n            setExercise({...exercise,res:result,respAct: true});\r\n     } catch (error) {\r\n            alert('Error, por favor revise el ejercicio');\r\n     }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"container calculator-container\">\r\n            <div className=\"col-md-6 calculatorBase mx-auto\">\r\n                <br/>\r\n                \r\n                <div className=\"resultCalculator\">\r\n                    <h5>{exercise.ex}</h5>\r\n                        <hr/>\r\n                    <h3>{exercise.res}</h3>\r\n                </div>\r\n                \r\n                <div className=\"numberCalculator\">\r\n                    <div className=\"row\">\r\n                        <Keys setExercise={setExercise}></Keys>\r\n\r\n                        <div className=\"col-sm-3 resultDiv\">  \r\n                            <div className=\"divBtnResult bg-primary text-white\" onClick={handleResult}>\r\n                                <h1>=</h1>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// propType, is used to designate the initialValue as a variable of type numeric\r\nCalculator.propTypes = {\r\n    initialValue : PropTypes.number\r\n}\r\n\r\n","import React from 'react'\r\nimport { Calculator } from './Components/Calculator'\r\n\r\nexport const CalculatorApp = () => {\r\n    return (\r\n        <div>\r\n            <Calculator initialValue={8}></Calculator>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalculatorApp } from './CalculatorApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CalculatorApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}